/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import ux.ConexionBD;

/**
 *
 * @author Martinez
 */
public class frmRetiroSinCuenta extends javax.swing.JFrame {

    /**
     * Creates new form frmRetiro
     */
    public frmRetiroSinCuenta() {
        initComponents();
        setLocationRelativeTo(null);
        imgCancelar.requestFocusInWindow();
        
        // Agregar un FocusListener
        txtFolio.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (txtFolio.getText().equals("Folio")) {
                    txtFolio.setText("");
                }
            }
            @Override
            public void focusLost(FocusEvent e) {
                if (txtFolio.getText().isEmpty()) {
                    txtFolio.setText("Folio");
                }
            }
        });
        
        // Agregar un FocusListener
        txtClave.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (txtClave.getText().equals("Clave")) {
                    txtClave.setText("");
                }
            }
            @Override
            public void focusLost(FocusEvent e) {
                if (txtClave.getText().isEmpty()) {
                    txtClave.setText("Clave");
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtFolio = new javax.swing.JTextField();
        txtClave = new javax.swing.JTextField();
        imgCancelar = new javax.swing.JLabel();
        imgAceptar = new javax.swing.JLabel();
        pnlMove = new javax.swing.JPanel();
        imgCerrar = new javax.swing.JLabel();
        imgMinimizar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        txtFolio.setBackground(new java.awt.Color(0, 51, 51));
        txtFolio.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        txtFolio.setForeground(new java.awt.Color(255, 255, 255));
        txtFolio.setText("Folio");

        txtClave.setBackground(new java.awt.Color(0, 51, 51));
        txtClave.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        txtClave.setForeground(new java.awt.Color(255, 255, 255));
        txtClave.setText("Clave");

        imgCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cancelar.png"))); // NOI18N
        imgCancelar.setText("Cancelar");
        imgCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        imgCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imgCancelarMouseClicked(evt);
            }
        });

        imgAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/aceptar.png"))); // NOI18N
        imgAceptar.setText("Aceptar");
        imgAceptar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        imgAceptar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imgAceptarMouseClicked(evt);
            }
        });

        pnlMove.setBackground(new java.awt.Color(0, 51, 51));

        imgCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cerrar.png"))); // NOI18N
        imgCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imgCerrarMouseClicked(evt);
            }
        });

        imgMinimizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/minimizar.png"))); // NOI18N
        imgMinimizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imgMinimizarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlMoveLayout = new javax.swing.GroupLayout(pnlMove);
        pnlMove.setLayout(pnlMoveLayout);
        pnlMoveLayout.setHorizontalGroup(
            pnlMoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMoveLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(imgMinimizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imgCerrar))
        );
        pnlMoveLayout.setVerticalGroup(
            pnlMoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imgCerrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(imgMinimizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtFolio)
                    .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imgCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(imgAceptar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pnlMove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFolio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imgCancelar)
                    .addComponent(imgAceptar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void imgCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imgCancelarMouseClicked
        // TODO add your handling code here:
        this.dispose();
        frmLogin login = new frmLogin();
        login.setVisible(true);
    }//GEN-LAST:event_imgCancelarMouseClicked

    private void imgCerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imgCerrarMouseClicked
        // TODO add your handling code here:
        this.dispose();
        frmLogin login = new frmLogin();
        login.setVisible(true);
    }//GEN-LAST:event_imgCerrarMouseClicked

    private void imgMinimizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imgMinimizarMouseClicked
        // TODO add your handling code here:
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_imgMinimizarMouseClicked

    private void imgAceptarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imgAceptarMouseClicked
        // TODO add your handling code here:
        String folio = txtFolio.getText();
        String clave = txtClave.getText();
        int estado = consultarEstado(folio, clave);

        switch (estado) {
            case 0:
                realizarRetiro(folio, clave);
                int estadoNow = consultarEstado(folio, clave);
                if(estadoNow == 1){
                    JOptionPane.showMessageDialog(null, "Usted ha realizado su retiro, continue.");
                }
                else{
                    JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar el retiro.");
                }   break;
            case 1:
                JOptionPane.showMessageDialog(null, "El retiro ya fue realizado.");
                break;
            default:
                JOptionPane.showMessageDialog(null, "Error al verificar el estado del retiro.");
                break;
        }
    }//GEN-LAST:event_imgAceptarMouseClicked
    
    private int consultarEstado(String folio, String clave){
        int estado = 0;
        try{
            Connection conexion = ConexionBD.openConnection();
            String consulta = "SELECT estado FROM RetirosSC WHERE folio=? AND clave=?";
            PreparedStatement pstm = conexion.prepareStatement(consulta);
            pstm.setString(1, folio);
            pstm.setString(2, clave);
            ResultSet rs = pstm.executeQuery();
            if(rs.next()){
                estado = rs.getInt("estado");
            }
            conexion.close();
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, "Error al consultar el estado. " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return estado;
    }

    private void realizarRetiro(String folio, String clave) {
        Connection conexion = null;
        PreparedStatement pstm = null;
        ResultSet rs = null;
    
        try {
            conexion = ConexionBD.openConnection();
    
            // Consultar el monto del retiro
            String consultaMonto = "SELECT monto, numeroCuenta FROM RetirosSC WHERE folio = ? AND clave = ?";
            pstm = conexion.prepareStatement(consultaMonto);
            pstm.setString(1, folio);
            pstm.setString(2, clave);
            rs = pstm.executeQuery();
    
            if (rs.next()) {
                double montoRetiro = rs.getDouble("monto");
                String cuentaOrigen = rs.getString("numeroCuenta");
    
                // Obtener el saldo actual de la cuenta de origen
                String consultaSaldo = "SELECT saldo FROM Cuentas WHERE numeroCuenta = ?";
                pstm = conexion.prepareStatement(consultaSaldo);
                pstm.setString(1, cuentaOrigen);
                rs = pstm.executeQuery();
    
                if (rs.next()) {
                    double saldoActual = rs.getDouble("saldo");
    
                    // Verificar si hay saldo suficiente
                    if (saldoActual >= montoRetiro) {
                        // Calcular el nuevo saldo
                        double nuevoSaldo = saldoActual - montoRetiro;
    
                        // Actualizar el saldo
                        String actualizarSaldo = "UPDATE Cuentas SET saldo = ? WHERE numeroCuenta = ?";
                        pstm = conexion.prepareStatement(actualizarSaldo);
                        pstm.setDouble(1, nuevoSaldo);
                        pstm.setString(2, cuentaOrigen);
                        pstm.executeUpdate();
    
                        // Marcar el retiro como cobrado
                        String marcarCobrado = "UPDATE RetirosSC SET estado = 1 WHERE folio = ? AND clave = ?";
                        pstm = conexion.prepareStatement(marcarCobrado);
                        pstm.setString(1, folio);
                        pstm.setString(2, clave);
                        pstm.executeUpdate();
    
                        JOptionPane.showMessageDialog(null, "Retiro realizado exitosamente.", "Detalles", JOptionPane.INFORMATION_MESSAGE);
                    } 
                    else {
                        JOptionPane.showMessageDialog(null, "Saldo insuficiente para realizar el retiro.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } 
            else {
                JOptionPane.showMessageDialog(null, "No se encontraron detalles para este retiro.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } 
        catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al realizar el retiro. " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } 
        finally {
            try {
                if (rs != null) rs.close();
                if (pstm != null) pstm.close();
                if (conexion != null) conexion.close();
            } 
            catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al cerrar la conexión. " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imgAceptar;
    private javax.swing.JLabel imgCancelar;
    private javax.swing.JLabel imgCerrar;
    private javax.swing.JLabel imgMinimizar;
    private javax.swing.JPanel pnlMove;
    private javax.swing.JTextField txtClave;
    private javax.swing.JTextField txtFolio;
    // End of variables declaration//GEN-END:variables
}
